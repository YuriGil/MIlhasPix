CONSOLIDAÇÃO DE CÓDIGOS DO PROJETO REACT-NATIVE
============================================================



============================================================
ARQUIVO: codigos_consolidados_reactnative.txt
============================================================



============================================================
ARQUIVO: next-env.d.ts
============================================================

/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/building-your-application/configuring/typescript for more information.


============================================================
ARQUIVO: package.json
============================================================

{
  "name": "milhaspix-desafio",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "framer-motion": "^10.12.16",
    "next": "^14.0.0",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@tailwindcss/postcss": "^4.1.14",
    "@types/node": "^24.7.0",
    "@types/react": "^18.3.26",
    "autoprefixer": "^10.4.21",
    "postcss": "^8.5.6",
    "tailwindcss": "^4.1.14",
    "typescript": "^5.9.3"
  }
}


============================================================
ARQUIVO: README.md
============================================================

# MilhasPix - Desafio Técnico (Ajustado)

Projeto ajustado conforme requisito técnico. Estrutura original mantida.

## Rodando localmente

Requisitos:
- Node 18+ recomendado
- npm (ou yarn)

1. Instale dependências:
```bash
npm install


============================================================
ARQUIVO: server.js
============================================================

// server.js - VERSÃO JAVASCRIPT
import express from "express";
import cors from "cors";

const app = express();
app.use(cors());
app.use(express.json());

// Banco fake em memória
let offers = [];
let currentId = 1;

// Listar todas as ofertas
app.get("/offers", (req, res) => {
  res.json(offers);
});

// Criar nova oferta
app.post("/offers", (req, res) => {
  const { title, description } = req.body;
  const newOffer = { id: currentId++, title, description };
  offers.push(newOffer);
  res.status(201).json(newOffer);
});

// Ranking fake
app.get("/ranking", (req, res) => {
  const ranking = offers.map((offer, index) => ({
    position: index + 1,
    ...offer,
  }));
  res.json(ranking);
});

const PORT = 3000;
app.listen(PORT, () => {
  console.log(`🚀 Backend rodando em http://localhost:${PORT}`);
});

============================================================
ARQUIVO: tailwind.config.js
============================================================

/** @type {import('tailwindcss').Config} */
const config = {
  content: [
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}"
  ],
  theme: {
    extend: {
      colors: { primary: "#1E90FF" },
      fontFamily: { sans: ["'Plus Jakarta Sans'", "sans-serif"] }
    }
  },
  plugins: []
};
export default config;

============================================================
ARQUIVO: tsconfig.json
============================================================

{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "es6"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "./*"
      ],
      "@/components/*": [
        "src/components/*"
      ],
      "@/services/*": [
        "src/services/*"
      ],
      "@/hook/*": [
        "src/hook/*"
      ],
      "@/styles/*": [
        "src/styles/*"
      ],
      "@/app/*": [
        "src/app/*"
      ],
      "@/api/*": [
        "src//app/api/*"
      ]
      ,
      "@/public/*": [
        "src/app/public/*"
      ]
      ,
      "@/images/*": [
        "src/app/images/*"
      ],
      "@/context/*": [
        "src/context*"
      ]
    },
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}


============================================================
ARQUIVO: src\app\layout.tsx
============================================================

import "./../styles/globals.css";
import type { Metadata } from "next";
import { Plus_Jakarta_Sans } from "next/font/google";
import Header from "@/components/Header";
import { BalanceProvider } from "../context/BalanceContext";
import ToastProvider from "@/components/ToastProvider";

const plusJakarta = Plus_Jakarta_Sans({
  subsets: ["latin"],
  weight: ["400", "500", "600", "700"],
});

export const metadata: Metadata = {
  title: "MilhasPix",
  description: "Gerencie suas ofertas de milhas e acompanhe seu saldo Pix em tempo real.",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="pt-BR">
      <body className={plusJakarta.className}>
        <BalanceProvider>
          <ToastProvider>
            <Header />
            {children}
          </ToastProvider>
        </BalanceProvider>
      </body>
    </html>
  );
}


============================================================
ARQUIVO: src\app\page.tsx
============================================================

"use client";
import React from "react";
import Image from "next/image";
import { useRouter } from "next/navigation";

export default function HomePage() {
  const router = useRouter();

  return (
    <main className="flex flex-col items-center justify-center min-h-[80vh] bg-[var(--bg)] px-4 text-center">
      {/* Logo central */}
      <div className="mb-6">
        <Image
          src="/images/logo.png"
          alt="MilhasPix"
          width={160}
          height={48}
          priority
          className="mx-auto"
        />
      </div>

      <h1 className="text-3xl font-bold text-[var(--primary)] mb-4">
        Bem-vindo ao MilhasPix
      </h1>
      <p className="max-w-xl text-[var(--muted)] mb-6 leading-relaxed">
        Cadastre suas ofertas de milhas, acompanhe seu ranking em tempo real e
        receba via Pix de forma rápida e segura.
      </p>

      <div className="flex gap-3">
        <button
          onClick={() => router.push("/nova-oferta")}
          className="cta bg-[var(--primary)] text-white hover:brightness-105 transition"
        >
          Nova Oferta
        </button>
        <button
          onClick={() => router.push("/minhas-ofertas")}
          className="btn-pill hover:bg-gray-100 transition"
        >
          Minhas Ofertas
        </button>
      </div>
    </main>
  );
}


============================================================
ARQUIVO: src\app\api\offers\route.ts
============================================================

// src/app/api/offers/route.ts
import { NextRequest, NextResponse } from "next/server";

type Offer = {
  id: string;
  program: string;
  subProgram?: string;
  status?: string;
  login?: string;
  amount?: string | number;
  date?: string;
  meta?: any;
};

let INTERNAL_OFFERS: Offer[] = []; // atenção: persistência em memória (ephemeral)

function nowId() {
  return `LOCAL-${Date.now()}`;
}

export async function GET(req: NextRequest) {
  try {
    return NextResponse.json(INTERNAL_OFFERS, { status: 200 });
  } catch (err: any) {
    return NextResponse.json({ error: String(err?.message || err) }, { status: 500 });
  }
}

export async function POST(req: NextRequest) {
  try {
    const body = await req.json().catch(() => ({}));
    const id = nowId();
    const date = new Date().toLocaleDateString("pt-BR", { day: "2-digit", month: "short", year: "numeric" });
    const offer: Offer = {
      id,
      program: body.program ?? "Smiles",
      subProgram: body.subProgram ?? "Comum",
      status: body.status ?? "Ativa",
      login: body.login ?? "user@example.com",
      amount: body.amount ?? body.miles ?? "10.000",
      date,
      meta: body.meta ?? {},
    };
    // insere no topo
    INTERNAL_OFFERS.unshift(offer);
    return NextResponse.json(offer, { status: 201 });
  } catch (err: any) {
    return NextResponse.json({ error: String(err?.message || err) }, { status: 500 });
  }
}


============================================================
ARQUIVO: src\app\api\proxy\route.ts
============================================================

import { NextRequest, NextResponse } from "next/server";

const API_BASE = "https://api.milhaspix.com";

export async function GET(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const endpoint = searchParams.get("endpoint");
    const query = searchParams.get("query") || "";

    if (!endpoint) {
      return NextResponse.json({ error: "Missing endpoint" }, { status: 400 });
    }

    const target = `${API_BASE}/${endpoint}${query ? `?${query}` : ""}`;
    const res = await fetch(target, {
      headers: { "Content-Type": "application/json" },
      cache: "no-store",
    });

    const data = await res.json().catch(() => ({}));

    // ✅ Retorna sempre com CORS liberado
    return new NextResponse(JSON.stringify(data), {
      status: res.status,
      headers: {
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Methods": "GET, OPTIONS",
        "Access-Control-Allow-Headers": "Content-Type, Authorization",
      },
    });
  } catch (error: any) {
    return NextResponse.json({ error: String(error?.message || error) }, { status: 500 });
  }
}

export async function OPTIONS() {
  return NextResponse.json({}, {
    headers: {
      "Access-Control-Allow-Origin": "*",
      "Access-Control-Allow-Methods": "GET, OPTIONS",
      "Access-Control-Allow-Headers": "Content-Type, Authorization",
    },
  });
}


============================================================
ARQUIVO: src\app\minhas-ofertas\page.tsx
============================================================

// src/app/minhas-ofertas/page.tsx
"use client";
import React, { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import OfferTable from "@/components/OfferTable";
import { useBalance } from "../../context/BalanceContext";
import { fetchMergedOffers } from "@/services/api";

export default function MinhasOfertasPage() {
  const router = useRouter();
  const { formattedBalance } = useBalance();

  const [offers, setOffers] = useState<any[]>([]);

  useEffect(() => {
    const stored = localStorage.getItem("minhas_ofertas");
    let localOffers: any[] = [];
    if (stored) {
      try {
        localOffers = JSON.parse(stored);
      } catch {
        localOffers = [];
      }
    }

    (async () => {
      try {
        const remote = await fetchMergedOffers();
        const merged = [
          ...localOffers,
          ...remote.filter((r: any) => !localOffers.some((l: any) => l.id === r.id)),
        ];
        merged.sort((a: any, b: any) => (b.ts || 0) - (a.ts || 0));
        setOffers(merged);
      } catch (e) {
        localOffers.sort((a: any, b: any) => (b.ts || 0) - (a.ts || 0));
        setOffers(localOffers);
      }
    })();
  }, []);

  return (
    <div className="app-container" style={{ paddingTop: 22 }}>
      <h1 className="page-title">Minhas ofertas</h1>

      <div className="minhas-layout">
        <div className="minhas-left">
          <OfferTable offers={offers} />

          <div className="flex justify-end mt-4">
            <button onClick={() => router.push("/nova-oferta")} className="cta">
              + Nova oferta
            </button>
          </div>
        </div>

        <div className="minhas-empty" aria-hidden />
      </div>

      <div className="mt-6 text-right text-sm text-muted">
        Saldo atual:{" "}
        <span className="font-semibold text-[var(--primary)]">{formattedBalance}</span>
      </div>
    </div>
  );
}


============================================================
ARQUIVO: src\app\nova-oferta\page.tsx
============================================================

// src/app/nova-oferta/page.tsx
"use client";
import React, { useMemo, useState, useEffect } from "react";
import Image from "next/image";
import { useRouter } from "next/navigation";
import { useBalance } from "../../context/BalanceContext";
import CurrencyInput from "@/components/CurrencyInput";
import RankingList from "@/components/RankingList";
import { useDebouncedValue } from "../../hooks/useDebouncedValue";
import { fetchRanking, postOffer } from "@/services/api";

const PROGRAMS = [
  { id: "tudoazul", label: "Tudo Azul", sub: "Liminar", img: "/images/tudoazul.png" },
  { id: "smiles", label: "Smiles", sub: "Liminar", img: "/images/smiles.png" },
  { id: "latam", label: "LATAM PASS", sub: "Comum", img: "/images/latampass.png" },
  { id: "tap", label: "TAP Air Portugal", sub: "Comum", img: "/images/topair.png" },
];

export default function NovaOfertaPage() {
  const router = useRouter();
  const { balance, setBalance } = useBalance();

  const [activeStep, setActiveStep] = useState<number>(1);

  const [selectedProgram, setSelectedProgram] = useState<string>(PROGRAMS[0].label);
  const [milheiroFormatted, setMilheiroFormatted] = useState<string>("R$ 0,00");
  const [milhasRaw, setMilhasRaw] = useState<string>(""); // start empty to avoid concat

  const [cpf, setCpf] = useState<string>("");
  const [login, setLogin] = useState<string>("");
  const [senha, setSenha] = useState<string>("");
  const [telefone, setTelefone] = useState<string>("");

  const [ranking, setRanking] = useState<any[]>([]);
  const debouncedMilheiro = useDebouncedValue(milheiroFormatted, 400);

  const parseMilheiro = (formatted: string) => {
    if (!formatted) return 0;
    const digits = formatted.replace(/\D/g, "");
    const value = Number(digits || 0) / 100;
    return isNaN(value) ? 0 : value;
  };

  const milheiro = parseMilheiro(milheiroFormatted);
  const milhas = Number(milhasRaw.replace(/\D/g, "")) || 0;

  const receiveValue = useMemo(() => {
    if (!milheiro || !milhas) return 0;
    return (milhas / 1000) * milheiro;
  }, [milheiro, milhas]);

  const formattedCurrency = (value: number) =>
    new Intl.NumberFormat("pt-BR", { style: "currency", currency: "BRL" }).format(value);

  useEffect(() => {
    let mounted = true;
    const v = parseMilheiro(debouncedMilheiro);
    if (v <= 0) {
      setRanking([]);
      return;
    }
    (async () => {
      try {
        const data = await fetchRanking(v);
        if (!mounted) return;
        const list = Array.isArray(data) ? data : data.ranking ?? data;
        setRanking(Array.isArray(list) ? list : []);
      } catch {
        setRanking([]);
      }
    })();
    return () => {
      mounted = false;
    };
  }, [debouncedMilheiro]);

  const goTo = (step: number) => {
    if (step < 1) step = 1;
    if (step > 4) step = 4;
    setActiveStep(step);
    if (typeof window !== "undefined") {
      const el = document.querySelector(".main-card") as HTMLElement | null;
      if (el) el.scrollIntoView({ behavior: "smooth", block: "start" });
    }
  };

  const handleNext = () => {
    if (activeStep === 1 && !selectedProgram) return;
    if (activeStep === 2 && (!milheiro || milheiro <= 0 || !milhas || milhas <= 0)) return;
    if (activeStep === 3 && (!cpf || !login || !senha)) return;
    goTo(activeStep + 1);
  };

  const handleBack = () => {
    if (activeStep === 1) return router.back();
    goTo(activeStep - 1);
  };

  const handleFinish = async () => {
    const now = new Date();
    const dateStr = now.toLocaleDateString("pt-BR", { day: "2-digit", month: "short", year: "numeric" });
    const ts = now.getTime();
    const id = `LOC-${ts.toString(36).toUpperCase()}`;

    const offer = {
      id,
      program: selectedProgram,
      subProgram: PROGRAMS.find((p) => p.label === selectedProgram)?.sub ?? "",
      status: "Ativa",
      login: login || `user${Math.floor(Math.random() * 9999)}@example.com`,
      amount: milhas,
      date: dateStr,
      ts,
      meta: { cpf, telefone, milheiro },
    };

    try {
      const prev = JSON.parse(localStorage.getItem("minhas_ofertas") || "[]");
      const next = [offer, ...prev];
      localStorage.setItem("minhas_ofertas", JSON.stringify(next));
    } catch (e) {
      console.warn("Erro salvando oferta localmente:", e);
    }

    try {
      await postOffer(offer).catch(() => {});
    } catch {}

    setBalance((prev) => prev + receiveValue);

    router.push("/minhas-ofertas");
  };

  return (
    <main className="nova-page">
      <div className="nova-grid">
        <aside className="stepper" role="tablist" aria-orientation="vertical">
          {[1, 2, 3, 4].map((num) => (
            <button
              key={num}
              type="button"
              onClick={() => goTo(num)}
              aria-current={activeStep === num}
              className={`step ${activeStep === num ? "active" : ""}`}
              style={{ background: "transparent", border: "none", width: "100%", textAlign: "left" }}
            >
              <div style={{ display: "flex", gap: 12, alignItems: "flex-start" }}>
                <div className={`dot ${activeStep === num ? "dot--active" : ""}`} aria-hidden>
                  {num}
                </div>
                <div>
                  <div className="step-title">Passo {num}</div>
                  <div className="step-sub">
                    {num === 1
                      ? "Escolha a companhia aérea"
                      : num === 2
                      ? "Oferte suas milhas"
                      : num === 3
                      ? "Dados do programa"
                      : "Pedido finalizado"}
                  </div>
                </div>
              </div>
            </button>
          ))}
        </aside>

        <section className="main-card">
          {activeStep === 1 && (
            <>
              <h2 className="section-title">01. Escolha o programa de fidelidade</h2>
              <div className="programs-grid">
                {PROGRAMS.map((p) => (
                  <button
                    key={p.id}
                    type="button"
                    onClick={() => setSelectedProgram(p.label)}
                    className={`program-select ${selectedProgram === p.label ? "selected" : ""}`}
                  >
                    <Image src={p.img} alt={p.label} width={48} height={48} style={{ objectFit: "contain" }} />
                    <div className="prog-name">{p.label}</div>
                    <div className="prog-sub">{p.sub}</div>
                  </button>
                ))}
              </div>

              <div className="flex justify-between mt-6">
                <button className="btn-pill" onClick={handleBack}>← Voltar</button>
                <button className="cta" onClick={handleNext}>Prosseguir →</button>
              </div>
            </>
          )}

          {activeStep === 2 && (
            <>
              <h2 className="section-title">02. Oferte suas milhas</h2>

              <div className="form-row">
                <div className="field">
                  <label className="label">Valor por 1.000 milhas</label>
                  <CurrencyInput value={milheiroFormatted} onChange={setMilheiroFormatted} placeholder="R$ 0,00" />
                </div>

                <div className="field">
                  <label className="label">Quantidade de milhas</label>
                  <input
                    className="input"
                    type="text"
                    inputMode="numeric"
                    pattern="\d*"
                    value={milhasRaw}
                    onChange={(e) => setMilhasRaw(e.target.value.replace(/\D/g, ""))}
                    onFocus={(e) => e.currentTarget.select()}
                    placeholder="Ex: 10000"
                  />
                </div>
              </div>

              <div className="flex justify-between mt-6">
                <button className="btn-pill" onClick={handleBack}>← Voltar</button>
                <button className="cta" onClick={handleNext}>Prosseguir →</button>
              </div>
            </>
          )}

          {activeStep === 3 && (
            <>
              <h2 className="section-title">03. Insira os dados do programa de fidelidade</h2>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                <div>
                  <label className="label">CPF do Titular</label>
                  <input className="input" value={cpf} onChange={(e) => setCpf(e.target.value)} placeholder="000.000.000-00" />
                </div>
                <div>
                  <label className="label">Login de acesso</label>
                  <input className="input" value={login} onChange={(e) => setLogin(e.target.value)} placeholder="login@provedor.com" />
                </div>
                <div>
                  <label className="label">Senha de acesso</label>
                  <input className="input" value={senha} onChange={(e) => setSenha(e.target.value)} placeholder="*******" type="password" />
                </div>
                <div>
                  <label className="label">Telefone</label>
                  <input className="input" value={telefone} onChange={(e) => setTelefone(e.target.value)} placeholder="+55 (11) 9XXXX-XXXX" />
                </div>
              </div>

              <div className="flex justify-between mt-6">
                <button className="btn-pill" onClick={handleBack}>← Voltar</button>
                <button className="cta" onClick={handleNext}>Concluir →</button>
              </div>
            </>
          )}

          {activeStep === 4 && (
            <div className="success-card">
              <div className="success-emoji">🎉</div>
              <h3 className="text-lg font-bold mb-2">Ordem de venda criada com sucesso!</h3>
              <p className="text-muted max-w-sm mx-auto mb-6">
                Agora é só aguardar — assim que suas milhas forem vendidas, o valor será transferido direto para sua conta via Pix.
              </p>

              <div className="flex justify-center gap-4">
                <button className="btn-pill" onClick={() => goTo(1)}>Cadastrar nova oferta</button>
                <button className="cta" onClick={handleFinish}>Ver minhas ofertas →</button>
              </div>
            </div>
          )}
        </section>

        <aside className="right-card">
          <div className="info-block">
            <div className="info-title">Média de milhas</div>
            <div className="info-body">Ao vender mais de 20.000 milhas, ative as opções avançadas para definir a média de milhas por emissão.</div>
          </div>

          <div style={{ marginTop: 8 }}>
            <RankingList list={ranking} />
          </div>

          <div className="receive-box" style={{ marginTop: 12 }}>
            <div className="text-sm text-muted">Receba até:</div>
            <div className="receive-value">{formattedCurrency(receiveValue)}</div>
          </div>
        </aside>
      </div>
    </main>
  );
}


============================================================
ARQUIVO: src\components\CurrencyInput.tsx
============================================================

// src/components/CurrencyInput.tsx
"use client";
import React from "react";

type Props = {
  value: string;
  onChange: (formatted: string) => void;
  placeholder?: string;
};

const onlyDigits = (s: string) => s.replace(/\D/g, "");
const formatBRLFromDigits = (digits: string) => {
  if (!digits) return "";
  let d = digits;
  while (d.length < 3) d = "0" + d;
  const cents = d.slice(-2);
  const intPart = d.slice(0, -2) || "0";
  const grouped = intPart.replace(/\B(?=(\d{3})+(?!\d))/g, ".");
  return `R$ ${grouped},${cents}`;
};

export default function CurrencyInput({ value, onChange, placeholder }: Props) {
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const digits = onlyDigits(e.target.value);
    onChange(formatBRLFromDigits(digits));
  };

  const handlePaste = (e: React.ClipboardEvent<HTMLInputElement>) => {
    const txt = e.clipboardData.getData("text/plain");
    const digits = onlyDigits(txt);
    e.preventDefault();
    onChange(formatBRLFromDigits(digits));
  };

  return (
    <input
      inputMode="numeric"
      value={value}
      onChange={handleChange}
      onFocus={(e) => e.currentTarget.select()}
      onPaste={handlePaste}
      placeholder={placeholder || "R$ 0,00"}
      className="currency-input input"
      aria-label="Valor por milheiro"
    />
  );
}


============================================================
ARQUIVO: src\components\Header.tsx
============================================================

// src/components/Header.tsx
"use client";
import React, { useEffect, useState } from "react";
import Image from "next/image";
import { usePathname } from "next/navigation";
import { useBalance } from "../context/BalanceContext";

export default function Header() {
  const path = usePathname();
  const { formattedBalance } = useBalance();
  const [displayBalance, setDisplayBalance] = useState<string>(formattedBalance);

  useEffect(() => {
    setDisplayBalance(formattedBalance);
  }, [formattedBalance]);

  useEffect(() => {
    const handle = (e: StorageEvent) => {
      if (e.key === "milhaspix_balance") {
        const v = Number(e.newValue);
        if (!Number.isNaN(v)) {
          setDisplayBalance(
            new Intl.NumberFormat("pt-BR", { style: "currency", currency: "BRL" }).format(v)
          );
        }
      }
    };
    window.addEventListener("storage", handle);
    return () => window.removeEventListener("storage", handle);
  }, []);

  return (
    <header className="header-bar">
      <div className="header-inner">
        <div className="flex items-center gap-3">
          <Image src="/images/logo.png" alt="MilhasPix" width={120} height={32} className="logo" priority />
          <span className="hidden sm:block font-semibold text-white text-base">
            {path === "/nova-oferta" ? "Nova Oferta" : path === "/minhas-ofertas" ? "Minhas Ofertas" : ""}
          </span>
        </div>
        <div>
          <div className="balance-pill" aria-live="polite">{displayBalance}</div>
        </div>
      </div>
    </header>
  );
}


============================================================
ARQUIVO: src\components\OfferTable.tsx
============================================================

// src/components/OfferTable.tsx
"use client";
import React from "react";
import Image from "next/image";

const getStatusChip = (status: string) => {
  const base = "chip";
  if (!status) return base;
  if (status.toLowerCase().includes("ativa")) return `${base} chip--green`;
  if (status.toLowerCase().includes("util")) return `${base} chip--blue`;
  return base;
};

const getLogoForProgram = (program?: string) => {
  if (!program) return "/images/default.png";
  const p = program.toLowerCase();
  if (p.includes("azul")) return "/images/tudoazul.png";
  if (p.includes("smiles")) return "/images/smiles.png";
  if (p.includes("latam")) return "/images/latampass.png";
  if (p.includes("tap")) return "/images/topair.png";
  return "/images/default.png";
};

export default function OfferTable({ offers = [] }: { offers: any[] }) {
  if (!offers || offers.length === 0) {
    return <div className="text-muted mt-4">Nenhuma oferta encontrada.</div>;
  }

  return (
    <div className="offers-panel">
      <div className="offers-header">
        <h2 className="title">Todas ofertas</h2>
        <div className="controls">
          <input className="search-input" placeholder="Login de acesso, ID da oferta..." />
          <button className="filter-btn">Filtros ▾</button>
        </div>
      </div>

      <div className="table-wrap">
        <table className="offers-table">
          <colgroup>
            <col style={{ width: "38%" }} />
            <col style={{ width: "10%" }} />
            <col style={{ width: "18%" }} />
            <col style={{ width: "20%" }} />
            <col style={{ width: "7%" }} />
            <col style={{ width: "7%" }} />
          </colgroup>
          <thead>
            <tr>
              <th>Programa</th>
              <th>Status</th>
              <th>ID da oferta</th>
              <th>Login</th>
              <th>Milhas</th>
              <th>Data</th>
            </tr>
          </thead>
          <tbody>
            {offers.map((offer: any) => (
              <tr key={offer.id ?? `${offer.program}-${offer.login}-${Math.random()}`}>
                <td>
                  <div className="program-cell">
                    <div className="program-logo">
                      <Image
                        src={getLogoForProgram(offer.program)}
                        alt={offer.program || "Programa"}
                        width={40}
                        height={40}
                        className="rounded-full"
                        priority={false}
                      />
                    </div>

                    <div style={{ minWidth: 0 }}>
                      <div className="prog-name" style={{ whiteSpace: "normal" }}>{offer.program}</div>
                      <div className="prog-sub">{offer.subProgram}</div>
                    </div>
                  </div>
                </td>

                <td>
                  <span className={getStatusChip(offer.status || "")}>{offer.status || "—"}</span>
                </td>

                <td style={{ overflow: "hidden", textOverflow: "ellipsis", whiteSpace: "nowrap" }}>{offer.id}</td>
                <td style={{ overflow: "hidden", textOverflow: "ellipsis", whiteSpace: "nowrap" }}>{offer.login}</td>
                <td style={{ textAlign: "left" }}>{offer.amount ?? offer.miles ?? "—"}</td>
                <td>{offer.date}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      <div className="table-actions">
        <button className="cta" onClick={() => (window.location.href = "/nova-oferta")}>+ Nova oferta</button>
      </div>
    </div>
  );
}


============================================================
ARQUIVO: src\components\RankingList.tsx
============================================================

"use client";
import React from "react";
import { motion } from "framer-motion";

type RankItem = { position?: number; value: number | string };

export default function RankingList({ list = [] }: { list: RankItem[] }) {
  return (
    <div className="ranking-card">
      <h4 className="ranking-title">Ranking das ofertas</h4>
      <div className="ranking-body">
        {list.length === 0 ? (
          <div className="text-muted">— sem dados —</div>
        ) : (
          <div className="flex flex-col gap-2">
            {list.map((r: RankItem, i: number) => {
              const raw = r.value ?? r;
              const value =
                typeof raw === "object" ? (raw as any).value ?? (raw as any).price ?? (raw as any).mile_value ?? JSON.stringify(raw) : raw;
              const valueStr =
                typeof value === "number"
                  ? `R$ ${value.toFixed(2).replace(".", ",")}`
                  : String(value).replace(".", ",");
              return (
                <motion.div key={i} initial={{ opacity: 0, y: 6 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.18 }}>
                  <div className={`ranking-row ${r.position === 99 ? "me" : ""}`}>
                    <div className="rank-pos">{r.position ?? i + 1}º</div>
                    <div className="rank-value">{valueStr}</div>
                  </div>
                </motion.div>
              );
            })}
          </div>
        )}
      </div>
    </div>
  );
}


============================================================
ARQUIVO: src\components\ToastProvider.tsx
============================================================

// src/components/ToastProvider.tsx
"use client";
import React, { createContext, useCallback, useContext, useState } from "react";

type Toast = { id: string; type?: "info" | "success" | "error"; title: string; ttl?: number };
type ToastContextType = { push: (t: Omit<Toast, "id">) => void };

const ToastContext = createContext<ToastContextType | null>(null);

export function useToast() {
  const ctx = useContext(ToastContext);
  if (!ctx) throw new Error("useToast must be used within ToastProvider");
  return ctx;
}

export default function ToastProvider({ children }: { children: React.ReactNode }) {
  const [list, setList] = useState<Toast[]>([]);

  const push = useCallback((t: Omit<Toast, "id">) => {
    const id = `toast-${Date.now()}-${Math.random().toString(36).slice(2, 7)}`;
    const ttl = t.ttl ?? 4500;
    const toast = { id, ...t, ttl };
    setList((s) => [toast, ...s]);
    setTimeout(() => setList((s) => s.filter((x) => x.id !== id)), ttl);
  }, []);

  return (
    <ToastContext.Provider value={{ push }}>
      {children}
      <div className="fixed top-4 right-4 z-50 flex flex-col gap-3 w-full max-w-xs">
        {list.map((t) => (
          <div
            key={t.id}
            className={`rounded-md p-3 shadow-md ${
              t.type === "success"
                ? "bg-green-50 border border-green-200"
                : t.type === "error"
                ? "bg-red-50 border border-red-200"
                : "bg-white border border-gray-200"
            }`}
          >
            <div
              className={`font-semibold ${
                t.type === "success"
                  ? "text-green-700"
                  : t.type === "error"
                  ? "text-red-700"
                  : "text-gray-800"
              }`}
            >
              {t.title}
            </div>
          </div>
        ))}
      </div>
    </ToastContext.Provider>
  );
}


============================================================
ARQUIVO: src\context\BalanceContext.tsx
============================================================

// src/context/BalanceContext.tsx
"use client";
import React, { createContext, useContext, useEffect, useMemo, useState, useCallback } from "react";

interface BalanceContextType {
  balance: number;
  setBalance: (value: number | ((prev: number) => number)) => void;
  formattedBalance: string;
}

const STORAGE_KEY = "milhaspix_balance";

const BalanceContext = createContext<BalanceContextType>({
  balance: 0,
  setBalance: () => {},
  formattedBalance: "R$ 0,00",
});

export const BalanceProvider = ({ children }: { children: React.ReactNode }) => {
  const [balance, setBalanceState] = useState<number>(() => {
    try {
      if (typeof window === "undefined") return 283.12;
      const raw = localStorage.getItem(STORAGE_KEY);
      return raw ? Number(raw) : 283.12;
    } catch {
      return 283.12;
    }
  });

  const setBalance = useCallback((value: number | ((prev: number) => number)) => {
    setBalanceState((prev) => {
      const next = typeof value === "function" ? (value as (p: number) => number)(prev) : value;
      try {
        localStorage.setItem(STORAGE_KEY, String(next));
      } catch {}
      return next;
    });
  }, []);

  useEffect(() => {
    const onStorage = (ev: StorageEvent) => {
      if (ev.key === STORAGE_KEY && ev.newValue) {
        const v = Number(ev.newValue);
        if (!Number.isNaN(v)) setBalanceState(v);
      }
    };
    window.addEventListener("storage", onStorage);
    return () => window.removeEventListener("storage", onStorage);
  }, []);

  const formattedBalance = useMemo(() => {
    return new Intl.NumberFormat("pt-BR", { style: "currency", currency: "BRL" }).format(balance);
  }, [balance]);

  return (
    <BalanceContext.Provider value={{ balance, setBalance, formattedBalance }}>
      {children}
    </BalanceContext.Provider>
  );
};

export function useBalance() {
  return useContext(BalanceContext);
}


============================================================
ARQUIVO: src\hooks\useDebouncedValue.ts
============================================================

import { useEffect, useState } from "react";

export function useDebouncedValue<T>(value: T, delay = 400) {
  const [debounced, setDebounced] = useState<T>(value);
  useEffect(() => {
    const t = setTimeout(() => setDebounced(value), delay);
    return () => clearTimeout(t);
  }, [value, delay]);
  return debounced;
}


============================================================
ARQUIVO: src\services\api.ts
============================================================

// src/services/api.ts
const LOCAL_PROXY = "/api/proxy";
const INTERNAL_OFFERS_ROUTE = "/api/offers";

async function fetchJson(url: string, opts: RequestInit = {}) {
  const res = await fetch(url, opts);
  if (!res.ok) {
    const txt = await res.text().catch(() => "");
    throw new Error(`Erro HTTP ${res.status} - ${txt}`);
  }
  return res.json();
}

// Ranking de ofertas (valor em milheiro)
export async function fetchRanking(mileValue: number | string) {
  const v = Number(mileValue || 0).toFixed(2);
  const url = `${LOCAL_PROXY}?endpoint=simulate-ranking&query=mile_value=${encodeURIComponent(v)}`;
  return fetchJson(url);
}

// Lista de ofertas simuladas (API externa via proxy)
export async function fetchOffersList() {
  const url = `${LOCAL_PROXY}?endpoint=simulate-offers-list`;
  const data = await fetchJson(url);
  const list = Array.isArray(data) ? data : data.offers ?? data.data ?? [];
  return list.map((o: any, i: number) => ({
    id: o.offerId ?? o.id ?? `OF-${i + 1}`,
    program: o.loyaltyProgram ?? o.program ?? "Smiles",
    subProgram: o.offerType ?? o.subProgram ?? "Comum",
    status: o.status ?? o.offerStatus ?? "Ativa",
    login: o.accountLogin ?? o.login ?? "user@example.com",
    amount: o.availableQuantity ?? o.amount ?? o.miles ?? "100.000",
    date: o.createdAt
      ? new Date(o.createdAt).toLocaleDateString("pt-BR", { day: "2-digit", month: "short", year: "numeric" })
      : "21 Jun 2025",
  }));
}

// POST para nossa API interna (persistência simulada)
export async function postOffer(payload: any) {
  const url = INTERNAL_OFFERS_ROUTE;
  return fetchJson(url, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(payload) });
}

// GET ofertas internas
export async function fetchInternalOffers() {
  const url = INTERNAL_OFFERS_ROUTE;
  try {
    const res = await fetchJson(url);
    return Array.isArray(res) ? res : [];
  } catch {
    return [];
  }
}

// Retorna listagem combinada: internas (criadas) + remotas (API simulate-offers-list)
export async function fetchMergedOffers() {
  const [internal, remote] = await Promise.allSettled([fetchInternalOffers(), fetchOffersList()]);
  const internalList = internal.status === "fulfilled" ? internal.value : [];
  const remoteList = remote.status === "fulfilled" ? remote.value : [];
  // garantir que IDs internos fiquem no topo e evitamos duplicatas por id
  const merged = [...internalList, ...remoteList.filter((r: any) => !internalList.some((l: any) => l.id === r.id))];
  return merged;
}


============================================================
ARQUIVO: src\styles\globals.css
============================================================

/* src/styles/globals.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Root */
:root{
  --primary: #1E90FF;
  --accent: #06B6D4;
  --muted: #6B7280;
  --bg: #cae4ff;
  --panel: #FFFFFF;
  --border: #E6E6E6;
  --success: #10B981;
}

/* Base */
body {
  background: var(--bg);
  font-family: "Plus Jakarta Sans", system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
  color: #111827;
  margin: 0;
}

/* Header */
.header-bar{
  height: 64px;
  background: var(--primary);
  display:flex;
  align-items:center;
  box-shadow: 0 1px 0 rgba(0,0,0,0.06);
}
.header-inner{
  width: 100%;
  max-width: 1200px;
  margin:0 auto;
  padding: 0 20px;
  display:flex;
  align-items:center;
  justify-content:space-between;
}
.logo { height: 32px; }
.balance-pill{
  border-radius: 24px;
  padding: 6px 14px;
  background: rgba(255,255,255,0.12);
  color: white;
  border: 1px solid rgba(255,255,255,0.16);
  font-weight:600;
}

/* Page container */
.app-container, .nova-page {
  max-width: 1200px;
  margin: 18px auto;
  padding: 0 20px 48px;
}
.page-title { font-size:20px; font-weight:700; margin-bottom:12px; color:#1f2937; }

/* MINHAS OFERTAS LAYOUT (left constrained panel + big whitespace to the right) */
.minhas-layout {
  display:flex;
  gap: 28px;
  align-items:flex-start;
}

/* left panel width (recreate the narrow card from screenshots) */
.minhas-left {
  width: 520px;
  max-width: calc(100% - 40px);
}

/* empty area to the right */
.minhas-empty {
  flex:1;
  min-height:200px;
  background: transparent;
}

/* mobile fallback: stack */
@media (max-width: 900px) {
  .minhas-layout { display:block; }
  .minhas-left { width:100%; }
  .minhas-empty { display:none; }
}

/* NOVA OFERTA GRID & STEPPER */
.nova-grid {
  display: grid;
  grid-template-columns: 1fr;
  gap: 16px;
  margin-top: 16px;
}
@media (min-width: 768px) {
  .nova-grid { grid-template-columns: 240px 1fr 320px; }
}
@media (min-width: 1200px) {
  .nova-grid { grid-template-columns: 260px 1fr 320px; }
}

/* Stepper behavior: horizontal on mobile, vertical on desktop */
.stepper {
  display:flex;
  flex-direction:row;
  overflow-x:auto;
  gap:12px;
  padding:12px;
  background:#fff;
  border-radius:12px;
  border:1px solid #e5e7eb;
  scroll-snap-type: x mandatory;
}
.stepper .step { flex:0 0 auto; scroll-snap-align: start; }
@media (min-width:768px) {
  .stepper { flex-direction:column; border:none; background:transparent; padding:0; gap:6px; }
  .stepper .step { flex:unset; padding: 16px 8px; border-left-width:4px; }
}

/* step visuals */
.step { display:flex; align-items:center; gap:12px; padding:12px; color:#9CA3AF; border-left:3px solid transparent; background: transparent; border-radius:8px; }
.step.active { color:#111827; border-left-color: var(--primary); background: linear-gradient(90deg, rgba(30,144,255,0.03), transparent); }
.dot { width:44px; height:44px; border-radius:50%; display:flex; align-items:center; justify-content:center; background:#fff; border: 2px solid #D1D5DB; font-weight:700; }
.dot--active { border-color: var(--primary); color: var(--primary); box-shadow: 0 6px 18px rgba(30,144,255,0.08); }
.step-title { font-weight:600; }
.step-sub { font-size:12px; color:#9CA3AF; }

/* Main card */
.main-card {
  background: var(--panel);
  border: 1px solid var(--border);
  border-radius: 12px;
  padding: 22px;
  min-height: 220px;
}

/* Program cards */
.programs-grid {
  display:flex;
  gap:12px;
  flex-wrap:wrap;
}
.program-select {
  display:flex;
  flex-direction:column;
  align-items:center;
  justify-content:center;
  gap:6px;
  min-width:150px;
  padding:12px 16px;
  border-radius:10px;
  border:1px solid var(--border);
  background:#fff;
  cursor:pointer;
}
.program-select.selected {
  border-color: var(--primary);
  box-shadow: 0 6px 18px rgba(30,144,255,0.06);
}
.prog-name { font-weight:700; color:#0f172a; white-space:nowrap; }
.prog-sub { font-size:12px; color:#9CA3AF; margin-top:6px; }

/* Form row & inputs */
.form-row { display:flex; gap:16px; margin-top:8px; align-items:flex-start; }
.field { flex:1; display:flex; flex-direction:column; gap:8px; }
.label { font-weight:600; font-size:13px; color:#374151; }
.input {
  display:block;
  width:100%;
  font-size:16px;
  padding:12px 14px;
  border-radius:10px;
  border:1px solid #d1d5db;
  background-color:#fff;
  transition: border-color .2s, box-shadow .2s;
}
.input:focus { border-color:var(--primary); box-shadow: 0 0 6px rgba(30,144,255,0.2); }

/* Buttons */
.btn-pill { border-radius:999px; padding:8px 14px; border:1px solid #E6E6E6; background:#fff; cursor:pointer; }
.cta { border-radius:999px; background: var(--primary); color:#fff; padding:10px 18px; border:none; cursor:pointer; box-shadow: 0 6px 18px rgba(30,144,255,0.12); }

/* Right card */
.right-card { background: var(--panel); border: 1px solid var(--border); border-radius: 8px; padding: 18px; }

/* Ranking card */
.ranking-card { background:#fff; border-radius:8px; padding:12px; border:1px solid var(--border); }
.ranking-row { display:flex; justify-content:space-between; padding:8px 10px; border-radius:8px; border:1px solid #F1F5F9; margin-bottom:8px; align-items:center; }

/* Receive box */
.receive-box { margin-top:16px; background:#ECFEFF; border-radius:8px; padding:12px; text-align:left; }
.receive-value { font-weight:700; font-size:16px; color:#0F172A; }

/* OFFERS PANEL */
.offers-panel { background: var(--panel); border-radius:16px; padding:18px; border:1px solid var(--border); margin-top:12px; max-width: 520px; }
.offers-header { display:flex; align-items:center; justify-content:space-between; gap:12px; }
.title { font-weight:700; color:#111827; }
.controls { display:flex; gap:8px; align-items:center; }
.search-input { padding:8px 12px; border-radius:999px; border:1px solid #EAEAEA; width:220px; max-width:60%; }
.filter-btn { padding:8px 12px; border-radius:999px; border:1px solid #EAEAEA; background:#fff; }

/* Table: prevent stretch, set column widths */
.table-wrap { overflow:auto; margin-top:12px; }
.offers-table {
  width: 100%;
  border-collapse: collapse;
  background: #fff;
  min-width: 0;
  table-layout: fixed;
}
.offers-table colgroup col { /* ensures proportions from OfferTable colgroup respected */ }
.offers-table thead th { text-align:left; padding:12px 10px; color:#6B7280; font-weight:700; font-size:13px; border-bottom:1px solid #F3F4F6; }
.offers-table tbody td { padding:12px 10px; border-top:1px solid #F8FAFC; vertical-align:middle; }

/* Program cell corrections to avoid vertical letters */
.program-cell { display:flex; gap:12px; align-items:center; min-width:0; }
.program-logo { width:40px; height:40px; border-radius:50%; background:#FEF3C7; flex-shrink:0; }
.prog-name { font-weight:600; color:#0f172a; white-space:nowrap; overflow:hidden; text-overflow:ellipsis; }
.prog-sub { font-size:12px; color:#9CA3AF; }

/* chips */
.chip { padding:6px 12px; border-radius:999px; display:inline-block; font-weight:600; font-size:12px; }
.chip--green { background:#D1FAE5; color:#065F46; }
.chip--blue { background:#C1D8EE; color:#0B3B78; }

/* success card */
.success-card { text-align:center; padding:32px 12px; border-radius:12px; border:1px solid var(--border); background:#fff; }
.success-emoji { font-size:36px; margin-bottom:12px; }

/* responsive tweaks */
@media (max-width: 640px) {
  .cta, .btn-pill { width: 100%; display:block; }
  .flex.justify-between.mt-6 { flex-direction: column; gap: 8px; }
  .fixed.top-4.right-4 { right: 8px; left: 8px; width: auto; }
}

/* micro animations */
.btn-pill, .cta { transition: transform .12s ease, box-shadow .12s ease; }
.btn-pill:hover { transform: translateY(-2px); }
.cta:hover { transform: translateY(-2px); }
.ranking-row:hover { transform: translateY(-2px); box-shadow: 0 10px 18px rgba(14,60,90,0.04); }


============================================================
ARQUIVO: src\utils\masks.ts
============================================================

// src/utils/masks.ts
export function maskCPF(value: string) {
  const digits = value.replace(/\D/g, "").slice(0, 11);
  return digits
    .replace(/^(\d{3})(\d)/, "$1.$2")
    .replace(/^(\d{3})\.(\d{3})(\d)/, "$1.$2.$3")
    .replace(/^(\d{3})\.(\d{3})\.(\d{3})(\d)/, "$1.$2.$3-$4");
}

export function maskPhone(value: string) {
  const digits = value.replace(/\D/g, "").slice(0, 13); // +55 + 11 + 9xxxx...
  // Accepts inputs like 5511999999999 or 11999999999
  if (digits.startsWith("55")) {
    // +55 (11) 91234-5678 or +55 (11) 1234-5678
    const rest = digits.slice(2);
    if (rest.length <= 2) return `+55 (${rest}`;
    if (rest.length <= 7) return `+55 (${rest.slice(0, 2)}) ${rest.slice(2)}`;
    if (rest.length <= 11) return `+55 (${rest.slice(0, 2)}) ${rest.slice(2, rest.length - 4)}-${rest.slice(-4)}`;
  } else {
    const d = digits;
    if (d.length <= 2) return `(${d}`;
    if (d.length <= 6) return `(${d.slice(0, 2)}) ${d.slice(2)}`;
    if (d.length <= 10) return `(${d.slice(0, 2)}) ${d.slice(2, d.length - 4)}-${d.slice(-4)}`;
    return `(${d.slice(0, 2)}) ${d.slice(2, 7)}-${d.slice(7, 11)}`;
  }
  return value;
}
