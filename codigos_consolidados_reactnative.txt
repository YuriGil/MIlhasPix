CONSOLIDA√á√ÉO DE C√ìDIGOS DO PROJETO REACT-NATIVE
============================================================



============================================================
ARQUIVO: codigos_consolidados_reactnative.txt
============================================================



============================================================
ARQUIVO: package.json
============================================================

{
  "name": "milhaspix-desafio",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "next": "14.0.0",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "tailwindcss": "^4.1.14",
    "autoprefixer": "^10.4.21",
    "postcss": "^8.5.6",
    "typescript": "^5.9.2"
  }
}


============================================================
ARQUIVO: README.md
============================================================

# üöÄ MilhasPix - Desafio T√©cnico

Projeto desenvolvido como parte do desafio t√©cnico solicitado.  
Implementa√ß√£o em **Next.js 14 (App Router)** + **React** + **TailwindCSS**, com consumo das APIs fornecidas.

---

## üìã Funcionalidades

- **Tela de Nova Oferta** (`/nova-oferta`)
  - Formul√°rio com inputs para:
    - Valor do milheiro (com m√°scara em R$).
    - Programa de milhas (select).
    - Quantidade de milhas.
  - Integra√ß√£o com API de Ranking:
    - `https://api.milhaspix.com/simulate-ranking?mile_value=VALOR`
    - Ranking atualizado em tempo real ao digitar o valor.

- **Tela de Minhas Ofertas** (`/minhas-ofertas`)
  - Consome API de ofertas fixas:
    - `https://api.milhaspix.com/simulate-offers-list`
  - Exibe tabela estilizada com ID, Programa e Valor.
  - Bot√£o **Nova Oferta** redireciona para o cadastro.

- **UI/UX**
  - Layout baseado no Figma.
  - Tipografia `Plus Jakarta Sans`.
  - Paleta e espa√ßamentos conforme design.
  - Responsivo em todas as telas.
  - Bot√µes e tabelas com hover states.

---

## üõ†Ô∏è Tecnologias

- [Next.js 14](https://nextjs.org/)  
- [React 18](https://react.dev/)  
- [Tailwind CSS](https://tailwindcss.com/)  
- [TypeScript](https://www.typescriptlang.org/)  

---

## üöÄ Rodando o Projeto Localmente

1. Clone o reposit√≥rio:
   ```bash
   git clone https://github.com/seu-usuario/milhasspix-desafio.git
   cd milhasspix-desafio
2. Instale as depend√™ncias:

         npm install
            # ou
         yarn install


3. Rode em modo desenvolvimento:

         npm run dev


4. Acesse:

http://localhost:3000/nova-oferta
http://localhost:3000/minhas-ofertas

============================================================
ARQUIVO: tailwind.config.js
============================================================

/** @type {import('tailwindcss').Config} */
const config = {
  content: [
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        primary: "#1E90FF",
      },
      fontFamily: {
        sans: ["'Plus Jakarta Sans'", "sans-serif"],
      },
    },
  },
  plugins: [],
};

export default config;


============================================================
ARQUIVO: tsconfig.json
============================================================

{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "es6"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "./*"
      ],
      "@/components/*": [
        "src/components/*"
      ],
      "@/services/*": [
        "src/services/*"
      ]
    }
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts",
    "server.js"
  ],
  "exclude": [
    "node_modules"
  ]
}


============================================================
ARQUIVO: src\app\layout.tsx
============================================================

import "../styles/globals.css";
import { Plus_Jakarta_Sans } from "next/font/google";

const jakarta = Plus_Jakarta_Sans({
  subsets: ["latin"],
  weight: ["400", "500", "600", "700"],
  variable: "--font-plus",
});

export const metadata = {
  title: "MilhasPix - Desafio",
  description: "Teste t√©cnico - MilhasPix"
};

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="pt-BR">
      <body className={jakarta.className}>{children}</body>
    </html>
  );
}

============================================================
ARQUIVO: src\app\page.tsx
============================================================

"use client";
import { useState } from "react";
import { useRouter } from "next/navigation";

export default function NovaOferta() {
  const [milheiro, setMilheiro] = useState<string>("");
  const [ranking, setRanking] = useState<any[]>([]);
  const router = useRouter();

  function formatCurrency(value: string) {
    const num = value.replace(/\D/g, "");
    if (!num) return "";
    const val = (Number(num) / 100).toFixed(2);
    return val.replace(".", ",");
  }

  async function handleChange(e: React.ChangeEvent<HTMLInputElement>) {
    const formatted = formatCurrency(e.target.value);
    setMilheiro(formatted);

    const apiValue = formatted.replace(",", ".");
    if (!apiValue) return;

    try {
      const res = await fetch(
        `https://api.milhaspix.com/simulate-ranking?mile_value=${apiValue}`
      );
      const data = await res.json();
      setRanking(data);
    } catch {
      setRanking([]);
    }
  }

  return (
    <main className="app-container py-10">
      <h1 className="h1-figma mb-6">Cadastrar Nova Oferta</h1>

      <div className="row items-start">
        {/* Form */}
        <div className="col flex-1">
          <div className="form-group">
            <label htmlFor="milheiro" className="lead">
              Valor do milheiro (R$)
            </label>
            <input
              id="milheiro"
              type="text"
              value={milheiro}
              onChange={handleChange}
              placeholder="Digite o valor"
              className="input input-mile"
            />
          </div>

          <div className="form-group">
            <label className="lead">Banco</label>
            <select className="input">
              <option>Selecione...</option>
              <option>Ita√∫</option>
              <option>Bradesco</option>
              <option>Santander</option>
            </select>
          </div>

          <div className="form-group">
            <label className="lead">Programa de Pontos</label>
            <select className="input">
              <option>Selecione...</option>
              <option>Livelo</option>
              <option>Esfera</option>
              <option>LATAM Pass</option>
            </select>
          </div>

          <div className="form-group">
            <label className="lead">Quantidade de milhas</label>
            <input
              type="number"
              placeholder="Ex: 10.000"
              className="input"
            />
          </div>

          <div className="row mt-4 gap-4">
            <button
              className="btn-primary"
              onClick={() => alert("Oferta cadastrada!")}
            >
              Cadastrar
            </button>
            <button
              className="btn-pill"
              onClick={() => router.push("/minhas-ofertas")}
            >
              Ver minhas ofertas
            </button>
          </div>
        </div>

        {/* Ranking */}
        <div className="ranking card-sm">
          <h3 className="lead mb-2">Ranking</h3>
          {ranking.length === 0 && (
            <p className="text-gray-500 text-sm">
              Digite o valor do milheiro para ver o ranking.
            </p>
          )}
          {ranking.map((item, idx) => (
            <div key={idx} className="item">
              <span>{item.name}</span>
              <span className="font-bold">{item.score}</span>
            </div>
          ))}
        </div>
      </div>
    </main>
  );
}


============================================================
ARQUIVO: src\app\api\proxy\route.ts
============================================================

import { NextResponse } from "next/server";

const API_URL = "https://api.milhaspix.com";

export async function GET(req: Request) {
  try {
    const { searchParams } = new URL(req.url);
    const endpoint = searchParams.get("endpoint");
    const query = searchParams.get("query");
    if (!endpoint)
      return NextResponse.json({ error: "Missing endpoint" }, { status: 400 });

    const url = `${API_URL}/${endpoint}${query ? `?${query}` : ""}`;
    const res = await fetch(url, { cache: "no-store" });
    const data = await res.json().catch(() => ({}));

    return NextResponse.json(data, {
      status: res.status,
      headers: { "Access-Control-Allow-Origin": "*" },
    });
  } catch (err: any) {
    return NextResponse.json({ error: err.message }, { status: 500 });
  }
}


============================================================
ARQUIVO: src\app\minhas-ofertas\page.tsx
============================================================

"use client";
import React, { useEffect, useState } from "react";
import Header from "../../components/Header";
import OfferTable from "../../components/OfferTable";
import { fetchOffersList } from "../../services/api";

export default function MinhasOfertasPage() {
  const [offers, setOffers] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    let mounted = true;
    fetchOffersList()
      .then((res: any) => {
        // normalize response to array
        const list = Array.isArray(res) ? res : res.offers ?? res.data ?? res;
        const normalized = (list || []).map((it: any, idx: number) => ({
          id: it.id ?? `OF-${idx+1}`,
          program: it.program ?? it.company ?? "Smiles",
          subProgram: it.subProgram ?? it.tier ?? "Comum",
          status: it.status ?? "Ativa",
          login: it.login ?? "user@example.com",
          amount: it.amount ?? it.miles ?? "100.000",
          date: it.date ?? "21 Jun 2025"
        }));
        if (mounted) setOffers(normalized);
      })
      .catch(() => {
        if (mounted) setOffers([]);
      })
      .finally(() => mounted && setLoading(false));
    return () => { mounted = false; };
  }, []);

  return (
    <div>
      <Header />
      <main className="app-container">
        <div className="page-wrap">
          <div className="page-head">
            <div className="page-title">Minhas ofertas</div>
            <div />
          </div>

          {loading ? <div className="text-gray-500">Carregando ofertas...</div> : <OfferTable offers={offers} />}
        </div>
      </main>
    </div>
  );
}


============================================================
ARQUIVO: src\app\nova-oferta\page.tsx
============================================================

"use client";
import React, { useEffect, useState } from "react";
import Header from "../../components/Header";
import CurrencyInput from "../../components/CurrencyInput";
import RankingList from "../../components/RankingList";
import { fetchRanking } from "../../services/api";
import { useDebouncedValue } from "../../hooks/useDebouncedValue";
import { useRouter } from "next/navigation";

export default function NovaOfertaPage() {
  const router = useRouter();
  const [milheiro, setMilheiro] = useState<string>("R$ 25,00");
  const debounced = useDebouncedValue(milheiro, 400);
  const [ranking, setRanking] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);

  const parseFormattedToNumber = (formatted: string) => {
    if (!formatted) return 0;
    const digits = formatted.replace(/\D/g, "");
    // last 2 digits are cents
    return Number(digits) / 100;
  };

  useEffect(() => {
    const val = parseFormattedToNumber(debounced);
    if (!val || val <= 0) {
      setRanking([]);
      return;
    }
    let cancelled = false;
    setLoading(true);
    fetchRanking(val)
      .then((res) => {
        if (cancelled) return;
        // API may return array or object
        if (Array.isArray(res)) {
          setRanking(res.map((v, i) => ({ position: i + 1, value: v })));
        } else if (res.ranking) {
          setRanking(res.ranking.map((v: any, i: number) => ({ position: i + 1, value: v })));
        } else {
          // fallback
          setRanking(Object.values(res).slice(0, 5).map((v: any, i: number) => ({ position: i + 1, value: v })));
        }
      })
      .catch(() => setRanking([]))
      .finally(() => !cancelled && setLoading(false));
    return () => { cancelled = true; };
  }, [debounced]);

  return (
    <div>
      <Header />
      <main className="nova-page">
        <div className="nova-grid">
          <aside className="stepper">
            {/* componente visual simples */}
            <div className="step active"><div className="dot">1</div><div>Passo 1</div></div>
            <div className="step active"><div className="dot">2</div><div>Passo 2</div></div>
            <div className="step"><div className="dot">3</div><div>Passo 3</div></div>
          </aside>

          <section className="main-card">
            <h2 className="text-lg font-semibold mb-4">02. Oferte suas milhas</h2>

            <div className="form-row">
              <div className="field">
                <label className="block mb-2">Milhas ofertadas</label>
                <input className="input" placeholder="10.000" />
              </div>

              <div className="field">
                <label className="block mb-2">Valor a cada 1.000 milhas</label>
                <CurrencyInput value={milheiro} onChange={setMilheiro} placeholder="R$ 25,00" />
              </div>
            </div>

            <div className="mt-4 flex gap-3">
              <button className="round-btn" onClick={() => router.back()}>‚Üê Voltar</button>
              <button className="cta ml-auto" onClick={() => router.push("/minhas-ofertas")}>Prosseguir ‚Üí</button>
            </div>
          </section>

          <aside className="right-card">
            <div className="font-semibold mb-2">M√©dia de milhas</div>
            <div className="p-3 bg-teal-50 rounded mb-4">R$ 24.325,23</div>
            <div>
              {loading ? <div className="text-sm text-gray-500">Atualizando ranking...</div> : <RankingList list={ranking} />}
            </div>
          </aside>
        </div>
      </main>
    </div>
  );
}


============================================================
ARQUIVO: src\components\CurrencyInput.tsx
============================================================

"use client";
import React from "react";

type Props = {
  value: string;
  onChange: (formatted: string) => void;
  placeholder?: string;
};

/** Formata d√≠gitos em "R$ 1.234,56" */
function onlyDigits(s: string) {
  return s.replace(/\D/g, "");
}
function formatBRLFromDigits(digits: string) {
  if (!digits) return "";
  // garante pelo menos 3 char para formata√ß√£o
  while (digits.length < 3) digits = "0" + digits;
  const cents = digits.slice(-2);
  const integer = digits.slice(0, -2) || "0";
  const grouped = integer.replace(/\B(?=(\d{3})+(?!\d))/g, ".");
  return `R$ ${grouped},${cents}`;
}

export default function CurrencyInput({ value, onChange, placeholder }: Props) {
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const raw = e.target.value;
    const digits = onlyDigits(raw);
    const formatted = formatBRLFromDigits(digits);
    onChange(formatted);
  };

  return (
    <input
      inputMode="numeric"
      value={value}
      onChange={handleChange}
      placeholder={placeholder}
      className="w-full rounded-lg border border-gray-200 px-4 py-2 placeholder-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-200"
    />
  );
}


============================================================
ARQUIVO: src\components\Header.tsx
============================================================

"use client";
import React from "react";

export default function Header({ balance = "R$ 283,12" }: { balance?: string }) {
  return (
    <div className="header-bar">
      <div className="header-inner">
        <div style={{display:'flex', alignItems:'center', gap:12}}>
          <img src="/logo-horizontal.png" alt="MilhasPix" style={{height:32}} />
        </div>
        <div>
          <button className="btn-pill">{balance}</button>
        </div>
      </div>
    </div>
  );
}


============================================================
ARQUIVO: src\components\OfferTable.tsx
============================================================

"use client";
import React from "react";
import { useRouter } from "next/navigation";

type Offer = {
  id: string;
  program: string;
  subProgram?: string;
  status?: string;
  login?: string;
  amount?: string | number;
  date?: string;
};

export default function OfferTable({ offers = [] as Offer[] }) {
  const router = useRouter();
  return (
    <div className="offers-panel mt-4">
      <div className="panel-top">
        <div className="panel-title">Todas ofertas</div>
        <div className="panel-controls">
          <input className="input rounded-full px-4 py-2 border" placeholder="Login de acesso, ID da oferta..." />
          <button className="btn-pill">Filtros ‚ñæ</button>
        </div>
      </div>

      <div className="overflow-auto">
        <table className="offers-table w-full">
          <thead>
            <tr>
              <th>Programa</th>
              <th>Status</th>
              <th>ID da oferta</th>
              <th>Login</th>
              <th>Milhas ofertadas</th>
              <th>Data</th>
            </tr>
          </thead>
          <tbody>
            {offers.map((o) => (
              <tr key={o.id}>
                <td>
                  <div className="program-badge">
                    <div className="program-logo" />
                    <div>
                      <div className="font-medium">{o.program}</div>
                      <div className="text-xs text-gray-500">{o.subProgram}</div>
                    </div>
                  </div>
                </td>
                <td>
                  <span className={`chip ${o.status?.toLowerCase().includes("ativa") ? "chip--green" : "chip--blue"}`}>
                    {o.status}
                  </span>
                </td>
                <td>{o.id}</td>
                <td>{o.login}</td>
                <td>{o.amount}</td>
                <td>{o.date}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      <div className="mt-4 flex justify-end">
        <button className="btn-primary" onClick={() => router.push("/nova-oferta")}>+ Nova oferta</button>
      </div>
    </div>
  );
}


============================================================
ARQUIVO: src\components\RankingList.tsx
============================================================

"use client";
import React from "react";

type RankItem = { position?: number; value: number | string };

export default function RankingList({ title = "Ranking das ofertas", list = [] as RankItem[] }) {
  return (
    <div className="w-full max-w-xs border border-gray-200 rounded-lg p-4 bg-white">
      <h3 className="text-sm font-semibold mb-3">{title}</h3>
      <ol className="space-y-2">
        {list.length === 0 ? (
          <div className="text-xs text-gray-400">Nenhum ranking dispon√≠vel</div>
        ) : (
          list.map((r, i) => (
            <li key={i} className="flex justify-between items-center bg-white px-3 py-2 rounded-md shadow-sm">
              <span className="text-sm text-gray-600">{r.position ?? i + 1}¬∫</span>
              <span className="text-sm font-medium text-gray-800">
                {typeof r.value === "number" ? `R$ ${Number(r.value).toFixed(2)}` : String(r.value)}
              </span>
            </li>
          ))
        )}
      </ol>
    </div>
  );
}


============================================================
ARQUIVO: src\hooks\useDebouncedValue.ts
============================================================

import { useEffect, useState } from "react";

export function useDebouncedValue<T>(value: T, delay = 350) {
  const [debounced, setDebounced] = useState<T>(value);
  useEffect(() => {
    const t = setTimeout(() => setDebounced(value), delay);
    return () => clearTimeout(t);
  }, [value, delay]);
  return debounced;
}


============================================================
ARQUIVO: src\services\api.ts
============================================================

// src/services/api.ts
const LOCAL_PROXY = "/api/proxy";

async function fetchJson(url: string) {
  const res = await fetch(url);
  if (!res.ok) throw new Error(`Erro HTTP ${res.status}`);
  return res.json();
}

export async function fetchRanking(mileValue: number | string) {
  const v = Number(mileValue || 0).toFixed(2);
  const url = `${LOCAL_PROXY}?endpoint=simulate-ranking&query=mile_value=${encodeURIComponent(v)}`;
  return fetchJson(url);
}

export async function fetchOffersList() {
  const url = `${LOCAL_PROXY}?endpoint=simulate-offers-list`;
  const res = await fetchJson(url);

  // a API retorna { totalQuantityOffers, offers: [...] }
  const list = Array.isArray(res) ? res : res.offers ?? [];
  return list.map((o: any, i: number) => ({
    id: o.offerId ?? `OF-${i + 1}`,
    status: o.offerStatus ?? "Ativa",
    program: o.loyaltyProgram ?? "-",
    type: o.offerType ?? "-",
    login: o.accountLogin ?? "-",
    date: o.createdAt
      ? new Date(o.createdAt).toLocaleDateString("pt-BR", {
          day: "2-digit",
          month: "2-digit",
          year: "numeric",
        })
      : "-",
    quantity: o.availableQuantity ?? "-",
  }));
}


============================================================
ARQUIVO: src\styles\globals.css
============================================================

@tailwind base;
@tailwind components;
@tailwind utilities;

:root{
  --primary: #1E90FF;
  --muted: #6B7280;
}

/* header */
.header-bar { height:64px; background:var(--primary); display:flex; align-items:center; }
.header-inner { max-width:1216px; margin:0 auto; width:100%; display:flex; justify-content:space-between; padding:0 16px; color:white; }

/* containers */
.app-container { max-width:1216px; margin:24px auto; padding:0 16px; }
.page-wrap { max-width:1216px; margin: 24px auto; padding: 0 16px; }

/* nova oferta grid */
.nova-page { max-width:1216px; margin:0 auto; padding:24px; }
.nova-grid { display:grid; grid-template-columns: 220px 1fr 300px; gap:24px; align-items:start; }
@media (max-width:1000px){ .nova-grid { grid-template-columns: 1fr; } }

/* cards / form */
.main-card, .right-card { background:white; border:1px solid #E6E6E6; border-radius:8px; padding:16px; }
.form-row { display:flex; gap:18px; }
.field { flex:1; }
.input { width:100%; padding:10px 12px; border:1px solid #EAEAEA; border-radius:8px; }
.cta { background:var(--primary); color:white; padding:10px 18px; border-radius:999px; }
.btn-primary { background:var(--primary); color:white; padding:8px 16px; border-radius:20px; }
.btn-pill { padding:8px 14px; border-radius:20px; border:1px solid #D9D9D9; background:white; }

/* offers table */
.offers-panel { background:white; border:1px solid #E6E6E6; border-radius:20px; padding:16px; }
.offers-table th { text-align:left; color:#9CA3AF; font-weight:700; padding:12px 8px; }
.offers-table td { padding:14px 8px; border-top:1px solid #F3F4F6; }

/* chips */
.chip { display:inline-block; padding:6px 12px; border-radius:20px; font-size:12px; font-weight:500; }
.chip--green { background:#D1FAE5; color:#065F46; }
.chip--blue { background:#C1D8EE; color:#0B3B78; }
